The following is what I think needs to be improved in my code:

It seems there are poorly thought out dependencies throughout the app, this became especially apparent when trying to
create mocks for unit tests.

Law of Demeter is violated

Class names all start with 'Weather'--clean code specifically tells you not to do this. Should refactor.

Names are ambiguous--I need to track down declarations to determine, for example, if chicagoWeather is a full API
response for the weather in chicago or if it is the "weather" subset of data (rainy, sunny etc).

Poor code coverage--71% classes, 66% lines, 53% methods
I also don't fully understand why some lines are considered 'covered' and some aren't--in Main class for example
the getTemp() method is not marked as covered but it is used in the tests. Maybe because it is just set with a mock?
In apiResponse classes, all the setters are marked as being covered but the getters are not.

I made a UML diagram for the weather app and have put it in the src folder. I am not 100% sure that I've diagrammed
things correctly, but just from trying to follow the diagram I made it does not seem like the classes have been
composed in a very logical way. Particularly the relationships between the WeatherApiCall, CurrentWeatherResponse, and
WeatherModel. It would be nice if I could refactor those, I'm not totally sure what I would do to improve things though.

Trying to name/structure these classes better by describing what they actually do:

CurrentWeatherResponse--a DTO that initially has none of its instance variables set. This class and the classes it is
composed of will store all weather data. The data is set with the Spring REST template.

WeatherApiCall--sets data in CurrentWeatherResponse by calling the Open Weather Map API and invoking the Spring
RestTemplate. RestTemplate uses Jackson to deserialize JSON data and set values in CurrentWeatherResponse and the
classes it is composed of.

WeatherModel--Created and operates on an instance of CurrentWeatherResponse--applies business logic to raw data to
generate the temp in Fahrenheit and the formatted temp string. Is this doing too many things?
When WeatherModel object is instantiated, static initialization block creates a WeatherApiCall instance which sets the
CurrentWeatherResponse instance variable to the data set from the API call. This variable is then used to get the
formatted data.
^I feel like this class is the one that makes the least sense. I would like to see if I can refactor this.

ApiStaticInfo--holds data (API key, city ID) that is used by WeatherApiCall and WeatherController

WeatherController--controller (Spring annotation) that maps HTML files to URLs. Attributes from WeatherModel and
ApiStaticInfo are added to a Model object, and Thymeleaf inserts these model attributes into the HTML code.
